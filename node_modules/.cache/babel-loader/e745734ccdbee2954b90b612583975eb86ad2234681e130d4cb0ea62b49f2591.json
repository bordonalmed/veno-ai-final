{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { PDFDocument, rgb, StandardFonts } from \"pdf-lib\";\nimport { saveAs } from \"file-saver\";\nimport { FiArrowLeft, FiEye, FiEdit, FiPrinter, FiX, FiTrash2 } from \"react-icons/fi\";\n\n// Helpers para exames salvos (localStorage)\nconst STORAGE_KEY = \"examesMMIIVenoso\";\nfunction getExamesSalvos() {\n  return JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\");\n}\nfunction salvarExame(exame) {\n  const todos = getExamesSalvos();\n  todos.push(exame);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(todos));\n}\nfunction atualizarExames(novos) {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(novos));\n}\nexport default function MMIIVenoso() {\n  _s();\n  const navigate = useNavigate();\n\n  // Campos do exame\n  const [nome, setNome] = useState(\"\");\n  const [data, setData] = useState(\"\");\n  const [lado, setLado] = useState(\"\");\n  const [dados, setDados] = useState({});\n  const [laudo, setLaudo] = useState(\"\");\n  const [mostrarExamesSalvos, setMostrarExamesSalvos] = useState(false);\n  const [mostrarFormulario, setMostrarFormulario] = useState(false);\n  const [exameEmEdicao, setExameEmEdicao] = useState(null);\n  const [exameVisualizando, setExameVisualizando] = useState(null);\n\n  // Campos das veias\n  const veiasProfundas = [\"Veia Femoral Comum\", \"Veia Femoral Superficial\", \"Veia Femoral Profunda\", \"Veia Poplítea\", \"Veias Tibiais posteriores\", \"Veias Tibiais anteriores\", \"Veias Gastrocnêmicas\", \"Veias Soleares\"];\n  const veiasSuperficiais = [\"JSF\", \"Safena Magna\", \"JSP\", \"Safena Parva\"];\n  const ladosPossiveis = [\"Direito\", \"Esquerdo\", \"Ambos\"];\n\n  // Estado dos campos das veias\n  function initCampos() {\n    return {\n      profundo: Object.fromEntries(veiasProfundas.map(v => [v, \"pérvia e competente\"])),\n      superficial: Object.fromEntries(veiasSuperficiais.map(v => [v, \"pérvia e competente\"])),\n      safena: {\n        \"Safena Magna\": {\n          coxa: \"\",\n          perna: \"\",\n          tornozelo: \"\",\n          inicio: \"\",\n          inicio_valor: \"\",\n          fim: \"\",\n          fim_valor: \"\"\n        },\n        \"Safena Parva\": {\n          proximal: \"\",\n          distal: \"\",\n          inicio: \"\",\n          inicio_valor: \"\",\n          fim: \"\",\n          fim_valor: \"\"\n        }\n      },\n      perfurante: \"competentes\",\n      local_perfurante_valor: \"\",\n      local_perfurante_tipo: \"\",\n      obs: \"\"\n    };\n  }\n  const [camposD, setCamposD] = useState(initCampos());\n  const [camposE, setCamposE] = useState(initCampos());\n  function handleLadoChange(val) {\n    setLado(val);\n    if (val === \"Direito\") setDados({\n      \"Direito\": {\n        ...camposD\n      }\n    });else if (val === \"Esquerdo\") setDados({\n      \"Esquerdo\": {\n        ...camposE\n      }\n    });else setDados({\n      \"Direito\": {\n        ...camposD\n      },\n      \"Esquerdo\": {\n        ...camposE\n      }\n    });\n  }\n  function atualizaCampos(side, novos) {\n    if (side === \"Direito\") {\n      setCamposD(novos);\n      setDados({\n        ...dados,\n        Direito: novos\n      });\n    } else {\n      setCamposE(novos);\n      setDados({\n        ...dados,\n        Esquerdo: novos\n      });\n    }\n  }\n\n  // Gerador de Laudo\n  function gerarLaudo() {\n    if (!nome || !data || !lado) {\n      alert(\"Preencha nome, data e lado!\");\n      return;\n    }\n    let laudos = {};\n    const sides = lado === \"Ambos\" ? [\"Direito\", \"Esquerdo\"] : [lado];\n    console.log(\"Gerando laudos para lados:\", sides);\n    console.log(\"Lado selecionado:\", lado);\n    sides.forEach(side => {\n      const c = side === \"Direito\" ? camposD : camposE;\n      console.log(`Processando lado: ${side}`, c);\n      let txt = \"\";\n      txt += `PACIENTE: ${nome}\\n`;\n      txt += `DATA: ${data}\\n`;\n      txt += `DOPPLER VENOSO DE MEMBRO INFERIOR ${side.toUpperCase()}\\n\\n`;\n      txt += \"Sistema Venoso Profundo:\\n\";\n      veiasProfundas.forEach(v => txt += `- ${v}: ${c.profundo[v]}\\n`);\n      txt += \"\\nSistema Venoso Superficial:\\n\";\n      veiasSuperficiais.forEach(v => {\n        txt += `- ${v}: ${c.superficial[v]}\\n`;\n        if ([\"Safena Magna\", \"Safena Parva\"].includes(v) && c.superficial[v] === \"pérvia e insuficiente\") {\n          const s = c.safena[v];\n          if (v === \"Safena Magna\") {\n            txt += `  > Diâmetro - Coxa: ${s.coxa} mm\\n`;\n            txt += `  > Diâmetro - Perna: ${s.perna} mm\\n`;\n            txt += `  > Diâmetro - Tornozelo: ${s.tornozelo} mm\\n`;\n          } else {\n            txt += `  > Diâmetro Proximal: ${s.proximal} mm\\n`;\n            txt += `  > Diâmetro Distal: ${s.distal} mm\\n`;\n          }\n          txt += `  > Segmento insuficiente: de ${s.inicio_valor} ${s.inicio} até ${s.fim_valor} ${s.fim}\\n`;\n        }\n      });\n      txt += `\\nVeias Perfurantes: ${c.perfurante}\\n`;\n      if (c.perfurante === \"incompetentes\" && (c.local_perfurante_valor || c.local_perfurante_tipo)) {\n        txt += `  > Localização: ${c.local_perfurante_valor} ${c.local_perfurante_tipo}\\n`;\n      }\n      if (c.obs && c.obs.trim()) {\n        txt += `\\nObservações (${side}):\\n${c.obs}\\n`;\n      }\n      txt += `\\nCONCLUSÃO:\\n`;\n      txt += gerarConclusaoPorSide(c, side);\n      txt += `\\n\\n`;\n      laudos[side] = txt;\n    });\n    console.log(\"Laudos gerados:\", Object.keys(laudos));\n    setLaudo(Object.values(laudos).join(\"\\n\"));\n    return laudos;\n  }\n  function gerarConclusaoPorSide(c, side) {\n    const profundos = c.profundo;\n    const superficiais = c.superficial;\n    const segmentos = c.safena;\n    const perfurante = c.perfurante;\n    const local_perf = `${c.local_perfurante_valor} ${c.local_perfurante_tipo}`;\n    let conclusoes = [];\n    if (Object.values(profundos).some(v => v.includes(\"não compressível\"))) {\n      conclusoes.push(\"Trombose venosa profunda\");\n    }\n    if (Object.values(profundos).some(v => v.includes(\"semi compressível\"))) {\n      conclusoes.push(\"Sinais de recanalização parcial do sistema venoso profundo\");\n    }\n    if (Object.values(profundos).some(v => v.includes(\"incompetente\"))) {\n      conclusoes.push(\"Insuficiência de sistema venoso profundo\");\n    }\n    [\"Safena Magna\", \"Safena Parva\"].forEach(veia => {\n      if (superficiais[veia] === \"pérvia e insuficiente\") {\n        const ini = segmentos[veia][\"inicio\"];\n        const fim = segmentos[veia][\"fim\"];\n        const ini_val = segmentos[veia][\"inicio_valor\"];\n        const fim_val = segmentos[veia][\"fim_valor\"];\n        const ini_fmt = ini && ini.includes(\"cm\") && ini_val ? `${ini_val} ${ini}` : ini;\n        const fim_fmt = fim && fim.includes(\"cm\") && fim_val ? `${fim_val} ${fim}` : fim;\n        if (ini_fmt && ini_fmt.includes(\"JSF\") && fim_fmt && fim_fmt.includes(\"tornozelo\") || ini_fmt && ini_fmt.includes(\"JSP\") && fim_fmt && fim_fmt.includes(\"tornozelo\")) {\n          conclusoes.push(`Insuficiência total da ${veia.toLowerCase()}`);\n        } else if (ini_fmt && ini_fmt.includes(\"joelho\") && fim_fmt && fim_fmt.includes(\"tornozelo\")) {\n          conclusoes.push(`Insuficiência parcial da ${veia.toLowerCase()}`);\n        } else if (ini_fmt && ini_fmt.includes(\"joelho\") && fim_fmt && fim_fmt.includes(\"joelho\")) {\n          conclusoes.push(`Insuficiência segmentar da ${veia.toLowerCase()}`);\n        }\n      }\n    });\n    if (superficiais[\"Safena Magna\"] === \"não compressível e sem fluxo (trombose)\") {\n      conclusoes.push(\"Tromboflebite da safena magna\");\n    }\n    if (superficiais[\"Safena Parva\"] === \"não compressível e sem fluxo (trombose)\") {\n      conclusoes.push(\"Tromboflebite da safena parva\");\n    }\n    if (superficiais[\"JSF\"] === \"pérvia e insuficiente\") {\n      conclusoes.push(\"Incompetência da junção safeno-femoral (JSF)\");\n    }\n    if (superficiais[\"JSP\"] === \"pérvia e insuficiente\") {\n      conclusoes.push(\"Incompetência da junção safeno-poplítea (JSP)\");\n    }\n    if (perfurante === \"incompetentes\") {\n      if (local_perf.trim()) conclusoes.push(`Insuficiência de veias perfurantes (${local_perf})`);else conclusoes.push(\"Insuficiência de veias perfurantes\");\n    }\n    if (!conclusoes.length) return \"- Ausência de refluxo venoso nos territórios estudados.\";\n    return \"- \" + conclusoes.join(\"\\n- \");\n  }\n\n  // PDF\n  async function gerarPDFExame({\n    nome,\n    data,\n    lados,\n    laudosPorLado\n  }) {\n    console.log(\"=== INICIANDO GERAÇÃO DE PDF ===\");\n    const doc = await PDFDocument.create();\n    const font = await doc.embedFont(StandardFonts.Helvetica);\n    const fontBold = await doc.embedFont(StandardFonts.HelveticaBold);\n\n    // Carregar logo se existir\n    let logoImage = null;\n    const logoClinica = localStorage.getItem(\"logoClinica\");\n    if (logoClinica) {\n      try {\n        logoImage = await doc.embedPng(logoClinica);\n      } catch (error) {\n        console.log(\"Erro ao carregar logo:\", error);\n      }\n    }\n\n    // Carregar assinatura se existir\n    let assinaturaImage = null;\n    const assinaturaMedico = localStorage.getItem(\"assinaturaMedico\");\n    console.log(\"Assinatura encontrada:\", !!assinaturaMedico);\n    console.log(\"Tamanho da assinatura:\", assinaturaMedico ? assinaturaMedico.length : 0);\n    if (assinaturaMedico && assinaturaMedico.length > 100) {\n      // Verificar se não está vazio\n      try {\n        assinaturaImage = await doc.embedPng(assinaturaMedico);\n        console.log(\"Assinatura carregada com sucesso\");\n      } catch (error) {\n        console.log(\"Erro ao carregar assinatura como PNG:\", error);\n        try {\n          assinaturaImage = await doc.embedJpg(assinaturaMedico);\n          console.log(\"Assinatura carregada como JPG com sucesso\");\n        } catch (error2) {\n          console.log(\"Erro ao carregar assinatura como JPG:\", error2);\n        }\n      }\n    }\n\n    // Obter dados do médico e da clínica\n    const nomeMedico = localStorage.getItem(\"nomeMedico\") || \"\";\n    const especialidade = localStorage.getItem(\"especialidade\") || \"\";\n    const crm = localStorage.getItem(\"crm\") || \"\";\n    const nomeClinica = localStorage.getItem(\"nomeClinica\") || \"\";\n    const dadosContato = localStorage.getItem(\"dadosContato\") || \"\";\n\n    // Obter perfil ativo\n    const clinicaAtiva = parseInt(localStorage.getItem(\"clinicaAtiva\") || \"0\", 10);\n    const perfilAtivo = clinicaAtiva + 1;\n    lados.forEach(ladoX => {\n      const laudo = laudosPorLado[ladoX];\n      // Margens em pontos\n      const MARGEM_SUP = 28.35; // 1cm\n      const MARGEM_INF = 28.35; // 1cm\n      const MARGEM_LAT = 14.17; // 0,5cm\n      const PAGE_WIDTH = 595;\n      const PAGE_HEIGHT = 842;\n      const page = doc.addPage([PAGE_WIDTH, PAGE_HEIGHT]); // A4 Portrait\n      const lineHeight = 20;\n      const yMin = MARGEM_INF;\n      const larguraUtil = PAGE_WIDTH - 2 * MARGEM_LAT;\n      let y = PAGE_HEIGHT - MARGEM_SUP;\n\n      // --- TOPO: LOGO CENTRALIZADO ---\n      let logoHeight = 0;\n      if (logoImage) {\n        const logoWidth = 120;\n        logoHeight = logoImage.height * logoWidth / logoImage.width;\n        const logoX = (PAGE_WIDTH - logoWidth) / 2;\n        page.drawImage(logoImage, {\n          x: logoX,\n          y: y - logoHeight,\n          width: logoWidth,\n          height: logoHeight\n        });\n      }\n      y -= logoHeight + 15;\n    });\n  }\n}\n_s(MMIIVenoso, \"dSHAU5w9ujbI1rs+kAic1384D7k=\", false, function () {\n  return [useNavigate];\n});\n_c = MMIIVenoso;\nvar _c;\n$RefreshReg$(_c, \"MMIIVenoso\");","map":{"version":3,"names":["React","useState","useNavigate","PDFDocument","rgb","StandardFonts","saveAs","FiArrowLeft","FiEye","FiEdit","FiPrinter","FiX","FiTrash2","STORAGE_KEY","getExamesSalvos","JSON","parse","localStorage","getItem","salvarExame","exame","todos","push","setItem","stringify","atualizarExames","novos","MMIIVenoso","_s","navigate","nome","setNome","data","setData","lado","setLado","dados","setDados","laudo","setLaudo","mostrarExamesSalvos","setMostrarExamesSalvos","mostrarFormulario","setMostrarFormulario","exameEmEdicao","setExameEmEdicao","exameVisualizando","setExameVisualizando","veiasProfundas","veiasSuperficiais","ladosPossiveis","initCampos","profundo","Object","fromEntries","map","v","superficial","safena","coxa","perna","tornozelo","inicio","inicio_valor","fim","fim_valor","proximal","distal","perfurante","local_perfurante_valor","local_perfurante_tipo","obs","camposD","setCamposD","camposE","setCamposE","handleLadoChange","val","atualizaCampos","side","Direito","Esquerdo","gerarLaudo","alert","laudos","sides","console","log","forEach","c","txt","toUpperCase","includes","s","trim","gerarConclusaoPorSide","keys","values","join","profundos","superficiais","segmentos","local_perf","conclusoes","some","veia","ini","ini_val","fim_val","ini_fmt","fim_fmt","toLowerCase","length","gerarPDFExame","lados","laudosPorLado","doc","create","font","embedFont","Helvetica","fontBold","HelveticaBold","logoImage","logoClinica","embedPng","error","assinaturaImage","assinaturaMedico","embedJpg","error2","nomeMedico","especialidade","crm","nomeClinica","dadosContato","clinicaAtiva","parseInt","perfilAtivo","ladoX","MARGEM_SUP","MARGEM_INF","MARGEM_LAT","PAGE_WIDTH","PAGE_HEIGHT","page","addPage","lineHeight","yMin","larguraUtil","y","logoHeight","logoWidth","height","width","logoX","drawImage","x","_c","$RefreshReg$"],"sources":["C:/Users/vascu/Downloads/veno.ai final/src/pages/MMIIVenoso.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { PDFDocument, rgb, StandardFonts } from \"pdf-lib\";\nimport { saveAs } from \"file-saver\";\nimport { FiArrowLeft, FiEye, FiEdit, FiPrinter, FiX, FiTrash2 } from \"react-icons/fi\";\n\n// Helpers para exames salvos (localStorage)\nconst STORAGE_KEY = \"examesMMIIVenoso\";\nfunction getExamesSalvos() {\n  return JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\");\n}\nfunction salvarExame(exame) {\n  const todos = getExamesSalvos();\n  todos.push(exame);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(todos));\n}\nfunction atualizarExames(novos) {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(novos));\n}\n\nexport default function MMIIVenoso() {\n  const navigate = useNavigate();\n\n  // Campos do exame\n  const [nome, setNome] = useState(\"\");\n  const [data, setData] = useState(\"\");\n  const [lado, setLado] = useState(\"\");\n  const [dados, setDados] = useState({});\n  const [laudo, setLaudo] = useState(\"\");\n  const [mostrarExamesSalvos, setMostrarExamesSalvos] = useState(false);\n  const [mostrarFormulario, setMostrarFormulario] = useState(false);\n  const [exameEmEdicao, setExameEmEdicao] = useState(null);\n  const [exameVisualizando, setExameVisualizando] = useState(null);\n\n  // Campos das veias\n  const veiasProfundas = [\n    \"Veia Femoral Comum\", \"Veia Femoral Superficial\", \"Veia Femoral Profunda\",\n    \"Veia Poplítea\", \"Veias Tibiais posteriores\", \"Veias Tibiais anteriores\",\n    \"Veias Gastrocnêmicas\", \"Veias Soleares\"\n  ];\n  const veiasSuperficiais = [\"JSF\", \"Safena Magna\", \"JSP\", \"Safena Parva\"];\n  const ladosPossiveis = [\"Direito\", \"Esquerdo\", \"Ambos\"];\n\n  // Estado dos campos das veias\n  function initCampos() {\n    return {\n      profundo: Object.fromEntries(veiasProfundas.map(v => [v, \"pérvia e competente\"])),\n      superficial: Object.fromEntries(veiasSuperficiais.map(v => [v, \"pérvia e competente\"])),\n      safena: {\n        \"Safena Magna\": {\n          coxa: \"\", perna: \"\", tornozelo: \"\",\n          inicio: \"\", inicio_valor: \"\", fim: \"\", fim_valor: \"\"\n        },\n        \"Safena Parva\": {\n          proximal: \"\", distal: \"\",\n          inicio: \"\", inicio_valor: \"\", fim: \"\", fim_valor: \"\"\n        }\n      },\n      perfurante: \"competentes\",\n      local_perfurante_valor: \"\",\n      local_perfurante_tipo: \"\",\n      obs: \"\",\n    };\n  }\n  const [camposD, setCamposD] = useState(initCampos());\n  const [camposE, setCamposE] = useState(initCampos());\n\n  function handleLadoChange(val) {\n    setLado(val);\n    if (val === \"Direito\") setDados({ \"Direito\": { ...camposD } });\n    else if (val === \"Esquerdo\") setDados({ \"Esquerdo\": { ...camposE } });\n    else setDados({ \"Direito\": { ...camposD }, \"Esquerdo\": { ...camposE } });\n  }\n  function atualizaCampos(side, novos) {\n    if (side === \"Direito\") { setCamposD(novos); setDados({ ...dados, Direito: novos }); }\n    else { setCamposE(novos); setDados({ ...dados, Esquerdo: novos }); }\n  }\n\n  // Gerador de Laudo\n  function gerarLaudo() {\n    if (!nome || !data || !lado) {\n      alert(\"Preencha nome, data e lado!\");\n      return;\n    }\n    let laudos = {};\n    const sides = (lado === \"Ambos\") ? [\"Direito\", \"Esquerdo\"] : [lado];\n    \n    console.log(\"Gerando laudos para lados:\", sides);\n    console.log(\"Lado selecionado:\", lado);\n    \n    sides.forEach(side => {\n      const c = side === \"Direito\" ? camposD : camposE;\n      console.log(`Processando lado: ${side}`, c);\n      \n      let txt = \"\";\n      txt += `PACIENTE: ${nome}\\n`;\n      txt += `DATA: ${data}\\n`;\n      txt += `DOPPLER VENOSO DE MEMBRO INFERIOR ${side.toUpperCase()}\\n\\n`;\n      txt += \"Sistema Venoso Profundo:\\n\";\n      veiasProfundas.forEach(v =>\n        txt += `- ${v}: ${c.profundo[v]}\\n`\n      );\n      txt += \"\\nSistema Venoso Superficial:\\n\";\n      veiasSuperficiais.forEach(v => {\n        txt += `- ${v}: ${c.superficial[v]}\\n`;\n        if ([\"Safena Magna\", \"Safena Parva\"].includes(v) && c.superficial[v] === \"pérvia e insuficiente\") {\n          const s = c.safena[v];\n          if (v === \"Safena Magna\") {\n            txt += `  > Diâmetro - Coxa: ${s.coxa} mm\\n`;\n            txt += `  > Diâmetro - Perna: ${s.perna} mm\\n`;\n            txt += `  > Diâmetro - Tornozelo: ${s.tornozelo} mm\\n`;\n          } else {\n            txt += `  > Diâmetro Proximal: ${s.proximal} mm\\n`;\n            txt += `  > Diâmetro Distal: ${s.distal} mm\\n`;\n          }\n          txt += `  > Segmento insuficiente: de ${s.inicio_valor} ${s.inicio} até ${s.fim_valor} ${s.fim}\\n`;\n        }\n      });\n      txt += `\\nVeias Perfurantes: ${c.perfurante}\\n`;\n      if (c.perfurante === \"incompetentes\" && (c.local_perfurante_valor || c.local_perfurante_tipo)) {\n        txt += `  > Localização: ${c.local_perfurante_valor} ${c.local_perfurante_tipo}\\n`;\n      }\n      if (c.obs && c.obs.trim()) {\n        txt += `\\nObservações (${side}):\\n${c.obs}\\n`;\n      }\n      txt += `\\nCONCLUSÃO:\\n`;\n      txt += gerarConclusaoPorSide(c, side);\n      txt += `\\n\\n`;\n      laudos[side] = txt;\n    });\n    \n    console.log(\"Laudos gerados:\", Object.keys(laudos));\n    setLaudo(Object.values(laudos).join(\"\\n\"));\n    return laudos;\n  }\n\n  function gerarConclusaoPorSide(c, side) {\n    const profundos = c.profundo;\n    const superficiais = c.superficial;\n    const segmentos = c.safena;\n    const perfurante = c.perfurante;\n    const local_perf = `${c.local_perfurante_valor} ${c.local_perfurante_tipo}`;\n    let conclusoes = [];\n    if (Object.values(profundos).some(v => v.includes(\"não compressível\"))) {\n      conclusoes.push(\"Trombose venosa profunda\");\n    }\n    if (Object.values(profundos).some(v => v.includes(\"semi compressível\"))) {\n      conclusoes.push(\"Sinais de recanalização parcial do sistema venoso profundo\");\n    }\n    if (Object.values(profundos).some(v => v.includes(\"incompetente\"))) {\n      conclusoes.push(\"Insuficiência de sistema venoso profundo\");\n    }\n    [\"Safena Magna\", \"Safena Parva\"].forEach(veia => {\n      if (superficiais[veia] === \"pérvia e insuficiente\") {\n        const ini = segmentos[veia][\"inicio\"];\n        const fim = segmentos[veia][\"fim\"];\n        const ini_val = segmentos[veia][\"inicio_valor\"];\n        const fim_val = segmentos[veia][\"fim_valor\"];\n        const ini_fmt = (ini && ini.includes(\"cm\") && ini_val) ? `${ini_val} ${ini}` : ini;\n        const fim_fmt = (fim && fim.includes(\"cm\") && fim_val) ? `${fim_val} ${fim}` : fim;\n        if ((ini_fmt && ini_fmt.includes(\"JSF\") && fim_fmt && fim_fmt.includes(\"tornozelo\")) ||\n            (ini_fmt && ini_fmt.includes(\"JSP\") && fim_fmt && fim_fmt.includes(\"tornozelo\"))) {\n          conclusoes.push(`Insuficiência total da ${veia.toLowerCase()}`);\n        } else if (ini_fmt && ini_fmt.includes(\"joelho\") && fim_fmt && fim_fmt.includes(\"tornozelo\")) {\n          conclusoes.push(`Insuficiência parcial da ${veia.toLowerCase()}`);\n        } else if (ini_fmt && ini_fmt.includes(\"joelho\") && fim_fmt && fim_fmt.includes(\"joelho\")) {\n          conclusoes.push(`Insuficiência segmentar da ${veia.toLowerCase()}`);\n        }\n      }\n    });\n    if (superficiais[\"Safena Magna\"] === \"não compressível e sem fluxo (trombose)\") {\n      conclusoes.push(\"Tromboflebite da safena magna\");\n    }\n    if (superficiais[\"Safena Parva\"] === \"não compressível e sem fluxo (trombose)\") {\n      conclusoes.push(\"Tromboflebite da safena parva\");\n    }\n    if (superficiais[\"JSF\"] === \"pérvia e insuficiente\") {\n      conclusoes.push(\"Incompetência da junção safeno-femoral (JSF)\");\n    }\n    if (superficiais[\"JSP\"] === \"pérvia e insuficiente\") {\n      conclusoes.push(\"Incompetência da junção safeno-poplítea (JSP)\");\n    }\n    if (perfurante === \"incompetentes\") {\n      if (local_perf.trim()) conclusoes.push(`Insuficiência de veias perfurantes (${local_perf})`);\n      else conclusoes.push(\"Insuficiência de veias perfurantes\");\n    }\n    if (!conclusoes.length) return \"- Ausência de refluxo venoso nos territórios estudados.\";\n    return \"- \" + conclusoes.join(\"\\n- \");\n  }\n\n  // PDF\n  async function gerarPDFExame({ nome, data, lados, laudosPorLado }) {\n    console.log(\"=== INICIANDO GERAÇÃO DE PDF ===\");\n    const doc = await PDFDocument.create();\n    const font = await doc.embedFont(StandardFonts.Helvetica);\n    const fontBold = await doc.embedFont(StandardFonts.HelveticaBold);\n    \n    // Carregar logo se existir\n    let logoImage = null;\n    const logoClinica = localStorage.getItem(\"logoClinica\");\n    if (logoClinica) {\n      try {\n        logoImage = await doc.embedPng(logoClinica);\n      } catch (error) {\n        console.log(\"Erro ao carregar logo:\", error);\n      }\n    }\n\n    // Carregar assinatura se existir\n    let assinaturaImage = null;\n    const assinaturaMedico = localStorage.getItem(\"assinaturaMedico\");\n    console.log(\"Assinatura encontrada:\", !!assinaturaMedico);\n    console.log(\"Tamanho da assinatura:\", assinaturaMedico ? assinaturaMedico.length : 0);\n    if (assinaturaMedico && assinaturaMedico.length > 100) { // Verificar se não está vazio\n      try {\n        assinaturaImage = await doc.embedPng(assinaturaMedico);\n        console.log(\"Assinatura carregada com sucesso\");\n      } catch (error) {\n        console.log(\"Erro ao carregar assinatura como PNG:\", error);\n        try {\n          assinaturaImage = await doc.embedJpg(assinaturaMedico);\n          console.log(\"Assinatura carregada como JPG com sucesso\");\n        } catch (error2) {\n          console.log(\"Erro ao carregar assinatura como JPG:\", error2);\n        }\n      }\n    }\n\n    // Obter dados do médico e da clínica\n    const nomeMedico = localStorage.getItem(\"nomeMedico\") || \"\";\n    const especialidade = localStorage.getItem(\"especialidade\") || \"\";\n    const crm = localStorage.getItem(\"crm\") || \"\";\n    const nomeClinica = localStorage.getItem(\"nomeClinica\") || \"\";\n    const dadosContato = localStorage.getItem(\"dadosContato\") || \"\";\n    \n    // Obter perfil ativo\n    const clinicaAtiva = parseInt(localStorage.getItem(\"clinicaAtiva\") || \"0\", 10);\n    const perfilAtivo = clinicaAtiva + 1;\n    \n    lados.forEach(ladoX => {\n      const laudo = laudosPorLado[ladoX];\n      // Margens em pontos\n      const MARGEM_SUP = 28.35; // 1cm\n      const MARGEM_INF = 28.35; // 1cm\n      const MARGEM_LAT = 14.17; // 0,5cm\n      const PAGE_WIDTH = 595;\n      const PAGE_HEIGHT = 842;\n      const page = doc.addPage([PAGE_WIDTH, PAGE_HEIGHT]); // A4 Portrait\n      const lineHeight = 20;\n      const yMin = MARGEM_INF;\n      const larguraUtil = PAGE_WIDTH - 2 * MARGEM_LAT;\n      let y = PAGE_HEIGHT - MARGEM_SUP;\n\n      // --- TOPO: LOGO CENTRALIZADO ---\n      let logoHeight = 0;\n      if (logoImage) {\n        const logoWidth = 120;\n        logoHeight = (logoImage.height * logoWidth) / logoImage.width;\n        const logoX = (PAGE_WIDTH - logoWidth) / 2;\n        page.drawImage(logoImage, {\n          x: logoX,\n          y: y - logoHeight,\n          width: logoWidth,\n          height: logoHeight,\n        });\n      }\n      y -= logoHeight + 15;\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}