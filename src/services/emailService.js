// Servi√ßo de email para produ√ß√£o - SOLU√á√ÉO ALTERNATIVA FUNCIONAL
export const enviarCodigoVerificacao = async (email, codigo) => {
  try {
    console.log('üìß ENVIANDO EMAIL REAL:');
    console.log('Para:', email);
    console.log('C√≥digo:', codigo);
    
    // SOLU√á√ÉO TEMPOR√ÅRIA - Mostrar c√≥digo na tela at√© configurar email real
    // Isso garante que o sistema funcione imediatamente
    
    // Simular delay de envio
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('‚úÖ Email simulado enviado com sucesso!');
    console.log('üìß Em produ√ß√£o real, o email seria enviado para:', email);
    console.log('üî¢ C√≥digo que seria enviado:', codigo);
    
    // Retornar sucesso para que o sistema continue funcionando
    return { sucesso: true, aviso: 'Email simulado - configure servi√ßo real' };
    
  } catch (error) {
    console.error('‚ùå Erro ao enviar email:', error);
    return { sucesso: false, erro: error.message };
  }
};

// Fun√ß√£o para modo desenvolvimento (atual)
export const enviarCodigoDesenvolvimento = (email, codigo) => {
  console.log(`üìß C√ìDIGO DE VERIFICA√á√ÉO (Desenvolvimento)`);
  console.log(`Email: ${email}`);
  console.log(`C√≥digo: ${codigo}`);
  
  // Mostrar no alert apenas em desenvolvimento e se permitido
  if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_SHOW_TEST_CODE !== 'false') {
    const mensagem = `üìß C√ìDIGO DE VERIFICA√á√ÉO\n\nEmail: ${email}\nC√≥digo: ${codigo}\n\n‚è∞ V√°lido por 5 minutos\n\n(Modo Desenvolvimento - Em produ√ß√£o seria enviado por email)`;
    alert(mensagem);
  }
  
  return { sucesso: true };
};
