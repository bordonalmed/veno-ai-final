// Sistema de c√≥digos de ativa√ß√£o para usu√°rios Premium
exports.handler = async (event, context) => {
  // Permitir CORS
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
      },
      body: ''
    };
  }
  
  const { email, codigo } = event.queryStringParameters || {};
  
  if (!email) {
    return {
      statusCode: 400,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({ 
        error: 'Email √© obrigat√≥rio',
        premium: false,
        plano: 'trial'
      })
    };
  }
  
  try {
    // LISTA DE EMAILS PREMIUM CONFIRMADOS
    const emailsPremiumConfirmados = [
      'vasculargabriel@gmail.com',
      // ADICIONAR AQUI OS EMAILS DOS CLIENTES QUE PAGARAM
    ];
    
    // C√ìDIGOS DE ATIVA√á√ÉO V√ÅLIDOS
    const codigosValidos = [
      'VENO2024',
      'PREMIUM2024',
      'HOTMART2024',
      // Adicionar c√≥digos conforme necess√°rio
    ];
    
    // Verificar se est√° na lista de Premium confirmados
    let isPremium = emailsPremiumConfirmados.includes(email.toLowerCase());
    
    // Se n√£o estiver na lista, verificar c√≥digo de ativa√ß√£o
    if (!isPremium && codigo) {
      if (codigosValidos.includes(codigo.toUpperCase())) {
        isPremium = true;
        console.log(`üéâ C√≥digo v√°lido usado por: ${email}`);
      } else {
        console.log(`‚ùå C√≥digo inv√°lido usado por: ${email}: ${codigo}`);
      }
    }
    
    console.log(`üîç Verificando usu√°rio: ${email} - Premium: ${isPremium}`);
    
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        email: email,
        premium: isPremium,
        plano: isPremium ? 'premium' : 'trial',
        status: 'success',
        timestamp: new Date().toISOString(),
        mensagem: isPremium ? 'Usu√°rio Premium detectado!' : 'Usu√°rio Trial',
        codigoUsado: codigo || null,
        codigoValido: codigo ? codigosValidos.includes(codigo.toUpperCase()) : null
      })
    };
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
    
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        error: 'Erro interno do servidor',
        premium: false,
        plano: 'trial'
      })
    };
  }
};
